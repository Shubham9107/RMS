{"version":3,"file":"static/js/821.57590b88.chunk.js","mappings":"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","sources":["API/api.js","API/Table.js","../node_modules/@mui/icons-material/esm/Clear.js","components/OrderCard/OrderCard.jsx","pages/Orders.jsx","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["import axios from 'axios'\n\n//axios to creating BaseUrl\nconst api = axios.create({\n    baseURL:\"https://codx-json-server.vercel.app\",\n    });\n    \nexport default api;","import { toast } from 'react-toastify';\nimport api from './api'\n\n//getting All Table deta with get method\nexport const TableData=async()=>{\n    try{\n    const response=await api.get(\"/api/tables\")\n    return response.data\n    }\n    catch(err) {\n        toast.error(\"Somthing Wrong!\")\n        }\n}\n\n//getting filtered data with get method\nexport const TableFilterById=async(id)=>\n{    try{\n    const response= await api.get(\"/api/tables/\"+id)\n    return response.data\n        }\n    catch(err) {\n        toast.error(\"Somthing Wrong!\")\n        }\n}\n\n//getting filtered data with get method\nexport const TableFilterByGuest=async(guest)=>{\n    try{\n    const response=await api.get(\"/api/tables?status=Available\")\n    let Filter=response.data.filter(data=>data.seating_capacity >= guest)\n    return Filter\n    }\n    catch(err) {\n        toast.error(\"Somthing Wrong!\")\n        }\n}\n\n//getting filtered data with get method\nexport const TableFilterByStatus=async()=>{\n    try{\n    const response=await api.get(\"/api/tables?status=Booked\")\n    return response.data\n    }\n    catch(err) {\n        toast.error(\"Somthing Wrong!\")\n        }\n}\n\n//update the table Data\nexport const BookingUpdate=async({id,data})=>{\n    try{\n    const response=await api.patch((\"/api/tables/\"+id),data,\n        {headers:{\n            'Accept':'application/json',\n            'Content-Type':'application/json'}})\n        return response.data\n    }\n    catch(err){\n        toast.error(\"Somthing Wrong!\")\n    }\n    \n} \n\n    ","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');","import { Box, Button, Card, IconButton, Typography } from '@mui/material'\nimport React from 'react'\nimport './orders.css'\nimport { Link} from 'react-router-dom'\nimport {Clear } from '@mui/icons-material'\n\nconst OrderCard = ({OrderData}) => {\n  const {data,deleteBookingMutation}=OrderData\n\n  const onSubmit=(id)=>{\n    const data={reservation:{},status:\"Available\"}\n    // console.log(id,data)\n    deleteBookingMutation({id,data})\n  }\n    return (\n    <Card variant='outlined' className='order-card'>\n        <Box>\n        <Typography variant='h6' component='div'>{data.reservation.name}</Typography>\n        <Typography component='p'>Order : {data.reservation.Order}</Typography>\n        <Typography component='p'>Table  : {data.table_no}</Typography>\n        </Box>\n        <Link to={`${data.id}`}>\n        <Button color='secondary' variant='outlined'>view Table</Button>\n        </Link>\n        <IconButton onClick={()=>onSubmit(data.id)} size='small'><Clear/></IconButton> \n    </Card>\n  )\n}\n\nexport default OrderCard","import React from 'react'\nimport OrderCard from '../components/OrderCard/OrderCard'\nimport {Box, Typography } from '@mui/material'\nimport { BookingUpdate, TableFilterByStatus } from '../API/Table'\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\nimport Loader from '../components/Loading/Loading'\nimport { toast } from 'react-toastify'\n\nconst ManageBooking = () => {\n  const queryClient = useQueryClient();\n\n  const { isLoading, data } = useQuery({\n    queryKey: [\"booking\"],\n    queryFn: TableFilterByStatus,\n  });\n\n  const { mutateAsync: deleteBookingMutation } = useMutation({\n    mutationFn: BookingUpdate,\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"booking\"]);\n      toast.error(\"Table Booking Cancel!\");\n    },\n  });\n\n  const BookingData=data || []\n  return (\n    <Box className='orders'>\n      <Typography className='first-title' variant='h6'>Orders</Typography>\n      <Typography className='second-title' variant='h4'>Your Journey to Flavor Begins Here!</Typography>\n      <Box className='orders-container'>\n        {\n          isLoading && <Loader/>\n        }\n      {\n        // Table Booked Data Mapping\n        BookingData.length ? BookingData.map((data,index)=><OrderCard key={index} OrderData={{data,deleteBookingMutation}}/>) \n        :<Typography sx={{textAlign:'center',color:'lightgray',fontSize:'30px',padding:'40px 0'}} component='p'> No Bookings Found</Typography>\n      }\n      </Box>\n    </Box>\n  )\n}\n\nexport default ManageBooking","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n"],"names":["axios","create","baseURL","TableData","async","api","get","data","err","toast","error","TableFilterById","id","TableFilterByGuest","filter","seating_capacity","guest","TableFilterByStatus","BookingUpdate","_ref","patch","headers","createSvgIcon","_jsx","d","OrderData","deleteBookingMutation","_jsxs","Card","variant","className","children","Box","Typography","component","reservation","name","Order","table_no","Link","to","concat","Button","color","IconButton","onClick","onSubmit","status","size","Clear","ManageBooking","queryClient","useQueryClient","isLoading","useQuery","queryKey","queryFn","mutateAsync","useMutation","mutationFn","onSuccess","invalidateQueries","BookingData","Loader","length","map","index","OrderCard","sx","textAlign","fontSize","padding","MutationObserver","_client","WeakMap","_currentResult","_currentMutation","_mutateOptions","_Class_brand","WeakSet","Subscribable","constructor","client","options","super","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","this","setOptions","bindMethods","_assertClassBrand","_updateResult","call","mutate","bind","reset","_classPrivateFieldGet2","prevOptions","_classPrivateFieldGet","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","observer","mutationKey","hashKey","state","onUnsubscribe","_classPrivateFieldGet3","hasListeners","removeObserver","onMutationUpdate","action","_notify","getCurrentResult","_classPrivateFieldGet4","variables","_classPrivateFieldGet5","build","addObserver","execute","_classPrivateFieldGet6","_classPrivateFieldGet7","getDefaultState","isPending","isSuccess","isError","isIdle","notifyManager","batch","context","_classPrivateFieldGet8","_classPrivateFieldGet9","_classPrivateFieldGet10","_classPrivateFieldGet11","onSettled","_classPrivateFieldGet12","_classPrivateFieldGet13","_classPrivateFieldGet14","_classPrivateFieldGet15","onError","listeners","forEach","listener","React","result","onStoreChange","subscribe","batchCalls","mutateOptions","catch","noop","shouldThrowError","throwOnError"],"sourceRoot":""}